%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% @author Владимир Щербина <vns.scherbina@gmail.com>
%% @copyright 2017
%% @version 1.1.0
%% @doc Модуль <b>{@module}</b> реализует конвертацию чисел в/из формата BCD.
%% @end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-module(bcd).

-export(
	[
		encode16/1,
		encode8/1,
		encode/2,
		decode/2
	]
).

%%%%%%%%%%%%%%%%%%%%%%
%%% public функции %%%
%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% @spec (N::integer) -> term
%% @doc <i>Кодирование 16-битного числа</i>
%% <p>
%% <b>N</b> - кодируемое число.
%% </p>
%% @end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
encode16(N) ->
	<<V:16>>=encode(N,2),
	V.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% @spec (N::integer) -> term
%% @doc <i>Кодирование 8-битного числа</i>
%% <p>
%% <b>N</b> - кодируемое число.
%% </p>
%% @end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
encode8(N) ->
	<<V:8>>=encode(N,1),
	V.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% @spec (N::integer,Size::integer) -> term
%% @doc <i>Кодирование числа</i>
%% <p>
%% <b>N</b> - кодируемое число;<br/>
%% <b>Size</b> - количество байт в результате кодирования.
%% </p>
%% @end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
encode(N, Size) ->
    << <<X:4>> || X <- lists:flatten(io_lib:fwrite("~*..0B", [Size*2, N])) >>.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% @spec (N::integer,Size::integer) -> term
%% @doc <i>Декодирование числа</i>
%% <p>
%% <b>N</b> - декодируемое число;<br/>
%% <b>Size</b> - количество байт в результате декодирования.
%% </p>
%% @end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
decode(N, Size) ->
    decode(N, Size, <<>>).

decode(_, 0, Text) ->
    Text;
decode(<<N1:4, N2:4, Num/binary>>, Size, Text) ->
    decode(Num, Size-1, <<Text/binary, (N2+16#30), (N1+16#30)>>).