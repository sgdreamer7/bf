%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% @author Владимир Щербина <vns.scherbina@gmail.com>
%% @copyright 2017
%% @version 1.0.0
%% @doc Модуль <b>fuel_energy.erl</b> реализует формирование данных
%% для протокола выходной формы хозрасчетных данных расхода топливно-энергетических
%% ресурсов и других параметров выплавки чугуна.
%% @end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-include("reports.hrl").

%%%%%%%%%%%%%%%%%%%%%%
%%% public функции %%%
%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% @spec ({struct,Props}) -> term
%% @doc <i>Формирование данных для рапорта</i>
%% <p>
%% <b>Props</b> - список ключей со значениями.
%% </p>
%% @end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
data({struct,Props}) ->
	{{Year,Month,Day},{Hour,Minute,Second}}=get_timestamp("report_date",Props),
	DayStart={{Year,Month,Day},{Hour,Minute,Second}}, %get_shift_start(Year,Month,Day,1),
	DayEnd=ts_add({{Year,Month,Day},{Hour,Minute,Second}},86400), %get_shift_start(Year,Month,Day,1),
	DayFinish=ts_add(DayStart,86400),
	MonthStart={{Year,Month,1},{0,0,0}},%get_shift_start(Year,Month,1,1),
	MonthFinish=case Month==12 of
		false ->
			ts_add({{Year,Month+1,1},{0,0,0}},-1); % get_shift_start(Year,Month+1,1,1)
		true ->
			ts_add({{Year+1,1,1},{0,0,0}},-1) % get_shift_start(Year+1,1,1,1)
	end,
	DayData=get_data_for_period(DayStart,DayFinish),
	ProcessedDayData=process_data(DayData),
	MonthData=get_data_for_period(MonthStart,MonthFinish),
	ProcessedMonthData=process_data(MonthData),
	[
		PPG_HD,
		TPG_HD,
		FPG_HD,
		PPG_GSS,
		TPG_GSS,
		FPG_GSS,
		PPG_GEL,
		TPG_GEL,
		FPG_GEL,
		PDG,
		TDG,
		FDG,
		PHD,
		THD,
		FHD,
		PVD_1,
		FVD_1,
		PVD_2,
		FVD_2,
		PVD_PIT_1,
		FVD_PIT_1,
		PVD_PIT_2,
		FVD_PIT_2,
		PVD_PIT_VN_1,
		FVD_PIT_VN_1,
		PVD_PIT_VN_2,
		FVD_PIT_VN_2,
		PPR_SIO_1,
		TPR_SIO_1,
		FPR_SIO_1,
		PPR_SIO_2,
		TPR_SIO_2,
		FPR_SIO_2,
		PPR_SIO_VN,
		TPR_SIO_VN,
		FPR_SIO_VN,
		PPR_HD,
		TPR_HD,
		FPR_HD,
		PPR,
		TPR,
		FPR,
		PVZ,
		TVZ,
		FVZ,
		PAZ,
		TAZ,
		FAZ,
		PVZ_OS,
		TVZ_OS,
		FVZ_OS,
		TKG,
		TPP,
		FO2,
		TGD,
		FDG_GSS
	]=ProcessedDayData,
	[
		_,
		_,
		FPG_HD_MONTH,
		_,
		_,
		FPG_GSS_MONTH,
		_,
		_,
		FPG_GEL_MONTH,
		_,
		_,
		FDG_MONTH,
		_,
		_,
		FHD_MONTH,
		_,
		FVD_1_MONTH,
		_,
		FVD_2_MONTH,
		_,
		FVD_PIT_1_MONTH,
		_,
		FVD_PIT_2_MONTH,
		_,
		FVD_PIT_VN_1_MONTH,
		_,
		FVD_PIT_VN_2_MONTH,
		_,
		_,
		FPR_SIO_1_MONTH,
		_,
		_,
		FPR_SIO_2_MONTH,
		_,
		_,
		FPR_SIO_VN_MONTH,
		_,
		_,
		FPR_HD_MONTH,
		_,
		_,
		FPR_MONTH,
		_,
		_,
		FVZ_MONTH,
		_,
		_,
		FAZ_MONTH,
		_,
		_,
		FVZ_OS_MONTH,
		_,
		_,
		FO2_MONTH,
		_,
		FDG_GSS_MONTH
	]=ProcessedMonthData,
	{_NodeName,HostName}=case tokens(lists:flatten(io_lib:format("~s",[node()])),"@") of
		[Node,Host] ->
			{Node,Host};
		_ ->
			{"",""}
	end,
	Result={ok,
		[
			{"host",HostName},
			{"build_date",format_datetime(calendar:local_time())},
			{"name","Выходная форма хозрасчетных данных для учета расхода топливно-энергетических ресурсов на ДП-4 и другие параметры выплавки чугуна"},
			{"report_date",format_datetime(DayStart)},
			{"report_date2",format_datetime(DayEnd)},
			{"PPG_HD",PPG_HD},
			{"TPG_HD",TPG_HD},
			{"FPG_HD",FPG_HD},
			{"PPG_GSS",PPG_GSS},
			{"TPG_GSS",TPG_GSS},
			{"FPG_GSS",FPG_GSS},
			{"PPG_GEL",PPG_GEL},
			{"TPG_GEL",TPG_GEL},
			{"FPG_GEL",FPG_GEL},
			{"PDG",PDG},
			{"TDG",TDG},
			{"FDG",FDG},
			{"PHD",PHD},
			{"THD",THD},
			{"FHD",FHD},
			{"PVD_1",PVD_1},
			{"FVD_1",FVD_1},
			{"PVD_2",PVD_2},
			{"FVD_2",FVD_2},
			{"PVD_PIT_1",PVD_PIT_1},
			{"FVD_PIT_1",FVD_PIT_1},
			{"PVD_PIT_2",PVD_PIT_2},
			{"FVD_PIT_2",FVD_PIT_2},
			{"PVD_PIT_VN_1",PVD_PIT_VN_1},
			{"FVD_PIT_VN_1",FVD_PIT_VN_1},
			{"PVD_PIT_VN_2",PVD_PIT_VN_2},
			{"FVD_PIT_VN_2",FVD_PIT_VN_2},
			{"PPR_SIO_1",PPR_SIO_1},
			{"TPR_SIO_1",TPR_SIO_1},
			{"FPR_SIO_1",FPR_SIO_1},
			{"PPR_SIO_2",PPR_SIO_2},
			{"TPR_SIO_2",TPR_SIO_2},
			{"FPR_SIO_2",FPR_SIO_2},
			{"PPR_SIO_VN",PPR_SIO_VN},
			{"TPR_SIO_VN",TPR_SIO_VN},
			{"FPR_SIO_VN",FPR_SIO_VN},
			{"PPR_HD",PPR_HD},
			{"TPR_HD",TPR_HD},
			{"FPR_HD",FPR_HD},
			{"PPR",PPR},
			{"TPR",TPR},
			{"FPR",FPR},
			{"PVZ",PVZ},
			{"TVZ",TVZ},
			{"FVZ",FVZ},
			{"PAZ",PAZ},
			{"TAZ",TAZ},
			{"FAZ",FAZ},
			{"PVZ_OS",PVZ_OS},
			{"TVZ_OS",TVZ_OS},
			{"FVZ_OS",FVZ_OS},
			{"TKG",TKG},
			{"TPP",TPP},
			{"FO2",FO2},
			{"TGD",TGD},
			{"FDG_GSS",FDG_GSS},
			{"FPG_HD_MONTH",FPG_HD_MONTH},
			{"FPG_GSS_MONTH",FPG_GSS_MONTH},
			{"FPG_GEL_MONTH",FPG_GEL_MONTH},
			{"FDG_MONTH",FDG_MONTH},
			{"FHD_MONTH",FHD_MONTH},
			{"FVD_1_MONTH",FVD_1_MONTH},
			{"FVD_2_MONTH",FVD_2_MONTH},
			{"FVD_PIT_1_MONTH",FVD_PIT_1_MONTH},
			{"FVD_PIT_2_MONTH",FVD_PIT_2_MONTH},
			{"FVD_PIT_VN_1_MONTH",FVD_PIT_VN_1_MONTH},
			{"FVD_PIT_VN_2_MONTH",FVD_PIT_VN_2_MONTH},
			{"FPR_SIO_1_MONTH",FPR_SIO_1_MONTH},
			{"FPR_SIO_2_MONTH",FPR_SIO_2_MONTH},
			{"FPR_SIO_VN_MONTH",FPR_SIO_VN_MONTH},
			{"FPR_HD_MONTH",FPR_HD_MONTH},
			{"FPR_MONTH",FPR_MONTH},
			{"FVZ_MONTH",FVZ_MONTH},
			{"FAZ_MONTH",FAZ_MONTH},
			{"FVZ_OS_MONTH",FVZ_OS_MONTH},
			{"FO2_MONTH",FO2_MONTH},
			{"FDG_GSS_MONTH",FDG_GSS_MONTH},
			{"FPG_TOTAL",FPG_HD+FPG_GSS+FPG_GEL},
			{"FPG_MONTH_TOTAL",FPG_HD_MONTH+FPG_GSS_MONTH+FPG_GEL_MONTH},
			{"FVD_TOTAL",FVD_1+FVD_2},
			{"FVD_MONTH_TOTAL",FVD_1_MONTH+FVD_2_MONTH},
			{"FVD_PIT_TOTAL",FVD_PIT_1+FVD_PIT_2},
			{"FVD_PIT_MONTH_TOTAL",FVD_PIT_1_MONTH+FVD_PIT_2_MONTH},
			{"FVD_PIT_VN_TOTAL",FVD_PIT_VN_1+FVD_PIT_VN_2},
			{"FVD_PIT_VN_MONTH_TOTAL",FVD_PIT_VN_1_MONTH+FVD_PIT_VN_2_MONTH},
			{"FVD_PIT_TOTAL_TOTAL",FVD_PIT_1+FVD_PIT_2+FVD_PIT_VN_1+FVD_PIT_VN_2},
			{"FVD_PIT_TOTAL_MONTH_TOTAL",FVD_PIT_1_MONTH+FVD_PIT_2_MONTH+FVD_PIT_VN_1_MONTH+FVD_PIT_VN_2_MONTH},
			{"FPR_SIO_TOTAL",FPR_SIO_1+FPR_SIO_2+FPR_SIO_VN},
			{"FPR_SIO_MONTH_TOTAL",FPR_SIO_1_MONTH+FPR_SIO_2_MONTH+FPR_SIO_VN_MONTH}
		]
	},
	Result;
data(_) ->
	{ok,[]}.

get_data_for_period(Start,Finish) ->
	Request=[
		{table,"ter"},
		{fields,
			[
				"PPG_HD",
				"TPG_HD",
				"FPG_HD",
				"PPG_GSS",
				"TPG_GSS",
				"FPG_GSS",
				"PPG_GEL",
				"TPG_GEL",
				"FPG_GEL",
				"PDG",
				"TDG",
				"FDG",
				"PHD",
				"THD",
				"FHD",
				"PVD_1",
				"FVD_1",
				"PVD_2",
				"FVD_2",
				"PVD_PIT_1",
				"FVD_PIT_1",
				"PVD_PIT_2",
				"FVD_PIT_2",
				"PVD_PIT_VN_1",
				"FVD_PIT_VN_1",
				"PVD_PIT_VN_2",
				"FVD_PIT_VN_2",
				"PPR_SIO_1",
				"TPR_SIO_1",
				"FPR_SIO_1",
				"PPR_SIO_2",
				"TPR_SIO_2",
				"FPR_SIO_2",
				"PPR_SIO_VN",
				"TPR_SIO_VN",
				"FPR_SIO_VN",
				"PPR_HD",
				"TPR_HD",
				"FPR_HD",
				"PPR",
				"TPR",
				"FPR",
				"PVZ",
				"TVZ",
				"FVZ",
				"PAZ",
				"TAZ",
				"FAZ",
				"PVZ_OS",
				"TVZ_OS",
				"FVZ_OS",
				"TKG",
				"TPP",
				"FO2",
				"TGD",
				"FDG_GSS"
			]
		},
		{conditions,
			[
				{"INDX",gte,Start},
				{"INDX",lt,Finish}
			]
		},
		{orders,[{"INDX",asc}]}
	],
	scada_db:get_data(Request).

process_data(Data) ->
	{AllCount,AllTotals}=lists:foldr(
		fun(
			Row,
			{Count,Totals}
		) ->
			NewCount=Count+1,
			NewTotals=calc_totals(Totals,Row),
			{NewCount,NewTotals}
		end,
		{0,[]},
		Data
	),
	[
		PPG_HD,
		TPG_HD,
		FPG_HD,
		PPG_GSS,
		TPG_GSS,
		FPG_GSS,
		PPG_GEL,
		TPG_GEL,
		FPG_GEL,
		PDG,
		TDG,
		FDG,
		PHD,
		THD,
		FHD,
		PVD_1,
		FVD_1,
		PVD_2,
		FVD_2,
		PVD_PIT_1,
		FVD_PIT_1,
		PVD_PIT_2,
		FVD_PIT_2,
		PVD_PIT_VN_1,
		FVD_PIT_VN_1,
		PVD_PIT_VN_2,
		FVD_PIT_VN_2,
		PPR_SIO_1,
		TPR_SIO_1,
		FPR_SIO_1,
		PPR_SIO_2,
		TPR_SIO_2,
		FPR_SIO_2,
		PPR_SIO_VN,
		TPR_SIO_VN,
		FPR_SIO_VN,
		PPR_HD,
		TPR_HD,
		FPR_HD,
		PPR,
		TPR,
		FPR,
		PVZ,
		TVZ,
		FVZ,
		PAZ,
		TAZ,
		FAZ,
		PVZ_OS,
		TVZ_OS,
		FVZ_OS,
		TKG,
		TPP,
		FO2,
		TGD,
		FDG_GSS
	]=AllTotals,
	case AllCount of
		0 ->
			[
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0
			];
		_ ->
			[
				PPG_HD/AllCount,
				TPG_HD/AllCount,
				FPG_HD/60,
				PPG_GSS/AllCount,
				TPG_GSS/AllCount,
				FPG_GSS/60,
				PPG_GEL/AllCount,
				TPG_GEL/AllCount,
				FPG_GEL/60,
				PDG/AllCount,
				TDG/AllCount,
				FDG/60,
				PHD/AllCount,
				THD/AllCount,
				FHD,
				PVD_1/AllCount,
				FVD_1/60,
				PVD_2/AllCount,
				FVD_2/60,
				PVD_PIT_1/AllCount,
				FVD_PIT_1/60,
				PVD_PIT_2/AllCount,
				FVD_PIT_2/60,
				PVD_PIT_VN_1/AllCount,
				FVD_PIT_VN_1/60,
				PVD_PIT_VN_2/AllCount,
				FVD_PIT_VN_2/60,
				PPR_SIO_1/AllCount,
				TPR_SIO_1/AllCount,
				FPR_SIO_1/60,
				PPR_SIO_2/AllCount,
				TPR_SIO_2/AllCount,
				FPR_SIO_2/60,
				PPR_SIO_VN/AllCount,
				TPR_SIO_VN/AllCount,
				FPR_SIO_VN/60,
				PPR_HD/AllCount,
				TPR_HD/AllCount,
				FPR_HD/60,
				PPR/AllCount,
				TPR/AllCount,
				FPR/60,
				PVZ/AllCount,
				TVZ/AllCount,
				FVZ/60,
				PAZ/AllCount,
				TAZ/AllCount,
				FAZ/60,
				PVZ_OS/AllCount,
				TVZ_OS/AllCount,
				FVZ_OS/60,
				TKG/AllCount,
				TPP/AllCount,
				FO2/60,
				TGD/AllCount,
				FDG_GSS/60
			]
	end.

	


calc_totals(Totals,[]) ->
	Totals;
calc_totals([],Row) ->
	Row;
calc_totals(Totals,Row) ->
	[V1+V2 || {V1,V2} <- lists:zip(Totals,Row)].

tokens(S,Sep) ->
    tokens(S,Sep,[],[]).

tokens([],_Sep,Tmp,Res) ->
    lists:reverse([lists:reverse(Tmp)|Res]);

tokens(S,Sep,Tmp,Res) ->
    case lists:prefix(Sep,S) of
        true ->
            {_Head,Tail}=lists:split(length(Sep),S),
            tokens(Tail,Sep,[],[lists:reverse(Tmp)|Res]);
        false ->
            [Head|Tail]=S,
            tokens(Tail,Sep,[Head|Tmp],Res)
    end.
